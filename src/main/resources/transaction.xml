<span style="font-size: small;" xmlns:aop="http://www.springframework.org/schema/aop"
      xmlns:tx="http://www.springframework.org/schema/tx"><!-- 事务策略配置管理器
    PROPAGATION_REQUIRED:支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。spring默认的事务策略
    PROPAGATION_SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行。
    PROPAGATION_MANDATORY:支持当前事务，如果当前没有事务，就抛出异常。
    PROPAGATION_REQUIRES_NEW:新建事务，如果当前存在事务，把当前事务挂起。
    PROPAGATION_NOT_SUPPORTED:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
    PROPAGATION_NEVER:以非事务方式执行，如果当前存在事务，则抛出异常。
    PROPAGATION_NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。
    -Exception表示有Exception抛出时,事务回滚. -代表回滚+就代表提交
    readonly 就是read only, 设置操作权限为只读,一般用于查询的方法,优化作用.

    设置强制使用CGLIB生成代理(spring代理方式 另外一种 JDKProxy动态代理)
    <property name="optimize" value="true" />
     -->

    <!-- <bean id="baseTransaction" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
        <property name="transactionManager" ref="transactionManager" />
        <property name="proxyTargetClass" value="true"/>
        <property name="transactionAttributes">
            <props>
                <prop key="get*">PROPAGATION_NOT_SUPPORTED,readOnly</prop>
                <prop key="find*">PROPAGATION_NOT_SUPPORTED,readOnly</prop>
                <prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="read*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="create*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="modify*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="change*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="*">PROPAGATION_REQUIRED,-Exception</prop>
            </props>
        </property>
        <property name="optimize" value="true" />
    </bean> -->

    <!-- 采用AOP拦截的方式实现事务管理 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="transacationPointcut" expression="execution(* com.main.admin.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvisor" pointcut-ref="transacationPointcut"/>
    </aop:config>
    <tx:advice id="txAdvisor" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="query*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="read*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="load*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="change*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice></span>